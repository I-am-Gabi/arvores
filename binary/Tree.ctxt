#BlueJ class context
comment0.params=
comment0.target=Tree()
comment0.text=\n\ Construtor\ que\ inicializar\ a\ raiz\ como\ nula\n
comment1.params=pessoa
comment1.target=void\ add(Pessoa)
comment1.text=\n\ addNode\ -\ m\u00E9todo\ chamado\ para\ adicionar\ um\ n\u00F3\ na\ \u00E1rvore\n\ \n\ @params\ pessoa\ O\ objeto\ pessoa\ que\ seja\ adicionado\ em\ um\ n\u00F3\ da\ \u00E1rvore\n
comment10.params=node
comment10.target=void\ calcHeight(Node)
comment11.params=node\ array
comment11.target=void\ roamPrefix(Node,\ java.util.ArrayList)
comment12.params=
comment12.target=int\ lowerValue()
comment13.params=node\ size
comment13.target=int\ lowerValue(Node,\ int)
comment14.params=
comment14.target=int\ greaterValue()
comment15.params=node\ size
comment15.target=int\ greaterValue(Node,\ int)
comment16.params=
comment16.target=void\ printPrefix()
comment17.params=node
comment17.target=void\ printPrefix(Node)
comment18.params=
comment18.target=void\ printPosfix()
comment19.params=node
comment19.target=void\ printPosfix(Node)
comment2.params=node\ pessoa
comment2.target=void\ add(Node,\ Pessoa)
comment2.text=\n\ add\ -\ m\u00E9todo\ que\ adiciona\ efetivamente\ um\ valor\ em\ um\ determinado\ n\u00F3.\ Ele\ verifica\ pelo\ valor\ o\ nome\ se\ a\ \n\ inst\u00E2ncia\ passada\ de\ Pessoa\ deve\ ficar\ a\ esquerda\ ou\ a\ direita\ do\ n\u00F3.\n\ \n\ @params\ node\ n\u00F3\ que\ ter\u00E1\ os\ filhos\ verificados\ para\ um\ deles\ ser\ preenchido\n\ @params\ pessoa\ inst\u00E2ncia\ que\ ser\u00E1\ atribuida\ ao\ campo\ Data\ do\ n\u00F3\ adicionado\n
comment3.params=toremove
comment3.target=void\ remove(Node)
comment4.params=name
comment4.target=Node\ searchBreadth(java.lang.String)
comment5.params=name
comment5.target=void\ searchDepth(java.lang.String)
comment5.text=\n\ search\ -\ m\u00E9todo\ chamada\ para\ pesquisar\ registro\ por\ nome.\ \n\ \n\ @params\ name\ String\ nome\ que\ ser\u00E1\ usada\ para\ a\ busca\n
comment6.params=node\ name\ flag
comment6.target=void\ searchDepth(Node,\ java.lang.String,\ int)
comment6.text=\n\ searchName\ -\ m\u00E9todo\ chamada\ no\ search\ para\ fazer\ uma\ busca\ por\ profundidade\ na\ \u00E1rvare,\ usando\ o\ valor\ do\ nome\n\ \n\ @params\ node\ n\u00F3\ atual\ usadao\ para\ a\ busca\n\ @params\ name\ String\ com\ valor\ usado\ como\ par\u00E2metro\ para\ a\ busca\n\ @params\ flag\ flag\ que\ indica\ se\ j\u00E1\ foi\ encontrado\ ou\ n\u00E3o\ o\ n\u00F3\ com\ valor\ buscado\n
comment7.params=CPF
comment7.target=boolean\ hasNode(java.lang.String)
comment7.text=\n\ hasNode\ -\ m\u00E9todo\ chamado\ quando\ queremos\ verificar\ se\ h\u00E1\ registro\ com\ o\ CPF\ passado\ por\ par\u00E2metro\n\ \n\ @params\ CPF\ valor\ do\ CPF\ que\ ser\u00E1\ usado\ para\ verificar\ a\ exist\u00EAncia\ de\ um\ registro\ semelhante\n\ @return\ True\ caso\ tenha\ encontrado,\ ou\ False\ caso\ contr\u00E1rio\n
comment8.params=node\ CPF
comment8.target=boolean\ seachCPF(Node,\ java.lang.String)
comment9.params=node
comment9.target=void\ getHeight(Node)
numComments=20
