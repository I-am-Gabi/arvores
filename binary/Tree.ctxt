#BlueJ class context
comment0.params=
comment0.target=Tree()
comment0.text=\r\n\ Construtor\ que\ inicializar\ a\ raiz\ como\ nula\r\n
comment1.params=pessoa
comment1.target=Node\ add(Pessoa)
comment1.text=\r\n\ add\ -\ m\u00E9todo\ chamado\ para\ adicionar\ um\ n\u00F3\ na\ \u00E1rvore\r\n\ \r\n\ @params\ pessoa\ O\ objeto\ pessoa\ que\ ser\u00E1\ adicionado\ em\ um\ n\u00F3\ da\ \u00E1rvore\r\n
comment10.params=node
comment10.target=int\ calcDepht(Node)
comment10.text=\r\n\ calcDepht\ -\ m\u00E9todo\ que\ calcula\ e\ retorna\ a\ profundidade\ de\ um\ n\u00F3\r\n\ \r\n\ @params\ node\ n\u00F3\ que\ ter\u00E1\ o\ valor\ da\ profundidade\ calculado\r\n\ @return\ depth\ profundidade\ do\ n\u00F3\ passado\ como\ argumento\r\n
comment11.params=node\ array
comment11.target=void\ roamPrefix(Node,\ java.util.ArrayList)
comment12.params=
comment12.target=Node\ lowerValue()
comment12.text=\r\n\ lowerValue\ -\ m\u00E9todo\ chamado\ para\ retornar\ o\ menor\ valor\ da\ \u00E1rvore.\r\n\ O\ menor\ valor\ ser\u00E1\ o\ do\ n\u00F3\ mais\ a\ esquerda.\r\n\ \r\n\ @return\ node\ n\u00F3\ com\ menor\ valor\ da\ \u00E1rvore\r\n
comment13.params=node
comment13.target=Node\ lowerValue(Node)
comment14.params=
comment14.target=Node\ greaterValue()
comment14.text=\r\n\ greaterValue\ -\ m\u00E9todo\ chamado\ para\ retornar\ o\ maior\ valor\ da\ \u00E1rvore.\r\n\ No\ nosso\ caso,\ o\ maior\ valor\ ser\u00E1\ a\ informa\u00E7\u00E3o\ que\ estiver\ no\ n\u00F3\ mais\ a\ direita.\r\n\ \r\n\ @return\ node\ n\u00F3s\ com\ maior\ valor\ da\ \u00E1rvore\r\n
comment15.params=node
comment15.target=Node\ greaterValue(Node)
comment15.text=\r\n\ \ greaterValue\ -\ m\u00E9todo\ que\ retorna\ o\ n\u00F3\ com\ "maior"\ valor\ da\ \u00E1rvore\r\n\ \ No\ nosso\ caso,\ o\ maior\ valor\ ser\u00E1\ a\ informa\u00E7\u00E3o\ que\ estiver\ no\ n\u00F3\ mais\ a\ direita.\r\n\ \ \r\n\ \ @params\ node\ n\u00F3\ que\ marcar\u00E1\ o\ in\u00EDcio\ da\ busca\ pelo\ maior\ valor\ na\ \u00E1rvore\r\n
comment16.params=
comment16.target=void\ printPrefix()
comment16.text=\r\n\ printPrefix\ -\ m\u00E9todo\ chamado\ para\ imprimir\ os\ valores\ da\ \u00E1rvore\ \r\n\ seguindo\ um\ caminhamento\ prefixado\r\n
comment17.params=node
comment17.target=void\ printPrefix(Node)
comment17.text=\r\n\ printPrefix\ -\ m\u00E9todo\ que\ imprimir\u00E1\ efetivamente\ os\ elementos\ da\ \u00E1rvore\ \r\n\ seguindo\ um\ caminhamento\ prefixado\r\n\ \r\n\ @params\ node\ n\u00F3\ que\ marcar\u00E1\ o\ in\u00EDcio\ da\ impress\u00E3o\ da\ \u00E1rvore\r\n
comment18.params=
comment18.target=void\ printPosfix()
comment18.text=\r\n\ printPosfix\ -\ m\u00E9todo\ chamado\ para\ imprimir\ os\ elementos\ da\ \u00E1rvore\ \r\n\ seguindo\ um\ caminhamento\ p\u00F3s-fixado\r\n
comment19.params=node
comment19.target=void\ printPosfix(Node)
comment19.text=\r\n\ printPosfix\ -\ m\u00E9todo\ que\ efetivamente\ vai\ imprimir\ os\ elementos\ da\ \u00E1rvore\ \r\n\ seguindo\ um\ caminhamento\ p\u00F3s-fixado\r\n\ \r\n\ @params\ node\ n\u00F3\ que\ marca\ o\ in\u00EDcio\ da\ impress\u00E3o\ dos\ n\u00F3s\ da\ \u00E1rvore\r\n
comment2.params=node\ pessoa
comment2.target=Node\ add(Node,\ Pessoa)
comment2.text=\r\n\ add\ -\ m\u00E9todo\ que\ adiciona\ efetivamente\ um\ valor\ em\ um\ determinado\ n\u00F3.\ Ele\ verifica\ pelo\ valor\ o\ nome\ se\ a\ \r\n\ inst\u00E2ncia\ passada\ de\ Pessoa\ deve\ ficar\ a\ esquerda\ ou\ a\ direita\ do\ n\u00F3.\r\n\ \r\n\ @params\ node\ n\u00F3\ que\ ter\u00E1\ os\ filhos\ verificados\ para\ um\ deles\ ser\ preenchido\r\n\ @params\ pessoa\ inst\u00E2ncia\ que\ ser\u00E1\ atribuida\ ao\ campo\ Data\ do\ n\u00F3\ adicionado\r\n
comment20.params=
comment20.target=Node\ getRoot()
comment20.text=\r\n\ getRoot()\ -\ M\u00E9todo\ que\ retorna\ o\ n\u00F3\ raiz\ da\ \u00E1rvore\r\n\ \r\n\ @return\ root\ n\u00F3\ raiz\ da\ arvore\ \r\n
comment3.params=to
comment3.target=void\ remove(Node)
comment3.text=\r\n\ remove\ -\ m\u00E9todo\ que\ ir\u00E1\ remover\ um\ n\u00F3\ da\ \u00E1rvore.\r\n\ Tr\u00EAs\ casos\ podem\ acontecer.\r\n\ 1)\ Caso\ o\ n\u00F3\ seja\ uma\ folha,\ e\ n\u00E3o\ possua\ sub-\u00E1rvores\r\n\ \ -\ nesse\ caso,\ \u00E9\ s\u00F3\ setar\ como\ nulo\ o\ campo\ que\ "aponta"\ para\ o\ n\u00F3\ removido\r\n\ 2)\ Caso\ o\ n\u00F3\ possua\ apenas\ uma\ sub-\u00E1rvore,\ a\ esquerda\ ou\ a\ direita\r\n\ \ -\ nesse\ caso,\ o\ valor\ que\ faz\ refer\u00EAncia\ ao\ n\u00F3\ removido\ passa\ a\ fazer\ refer\u00EAncia\ \r\n\ \ a\ sub-\u00E1rvore\ que\ existia\ ligado\ ao\ este\ n\u00F3\r\n\ 3)\ Caso\ o\ n\u00F3\ possua\ duas\ sub-\u00E1rvores\r\n\ \ -\ nessa\ situa\u00E7\u00E3o,\ pegamos\ um\ valor\ menor,\ abaixo\ desse\ n\u00F3\ que\ quero\ remover\ (no\ caso,\ pegarmos\ um\ que\ seja\ uma\ folha.\ \r\n\ \ removemos\ esse\ n\u00F3\ folha\ que\ estava\ no\ final\ e\ substituimos\ o\ n\u00F3\ que\ quer\u00EDamos\ remover\ inicialmente,\ por\ ele.\r\n
comment4.params=name
comment4.target=Node\ searchBreadth(java.lang.String)
comment4.text=\r\n\ searchBreadth\ -\ buscar\ um\ elemento\ utilizando\ a\ estrat\u00E9gia\ de\ busca\ em\ largura.\r\n\ Inicialmente\ ele\ cria\ dois\ ArrayLists\ para\ armazenar\ a\ sub\u00E1rvore\ a\ esquerda\ \r\n\ e\ a\ direita.\ E\ ent\u00E3o\ pesquisa\ o\ valor\ 'name'\ em\ ambos\ os\ arrays.\r\n\ A\ forma\ como\ esses\ arrays\ s\u00E3o\ criados\ e\ acessados,\ faz\ com\ que\ os\ valores\r\n\ sejam\ visitados\ pela\ t\u00E9cnica\ da\ largura\r\n\ \r\n\ @params\ name\ String\ que\ possui\ o\ valor\ do\ name\ que\ ser\u00E1\ pesquisado\ \r\n\ @return\ node\ n\u00F3\ com\ o\ valor\ que\ est\u00E1\ sendo\ buscado\r\n
comment5.params=name
comment5.target=Node\ searchDepth(java.lang.String)
comment5.text=\r\n\ searchDepth\ -\ buscar\ um\ elemento\ utilizando\ a\ estrat\u00E9gia\ de\ busca\ em\ profundidade\r\n\ \r\n\ @params\ name\ nome\ da\ pessoa\ que\ est\u00E1\ sendo\ pesquisada\r\n\ @return\ node\ n\u00F3\ com\ o\ valor\ que\ est\u00E1\ sendo\ buscado\r\n
comment6.params=node\ name
comment6.target=Node\ searchDepth(Node,\ java.lang.String)
comment6.text=\r\n\ searchDepth\ -\ buscar\ um\ elemento\ utilizando\ a\ estrat\u00E9gia\ de\ busca\ em\ profundidade\r\n\ \r\n\ @params\ node\ n\u00F3\ que\ marcar\u00E1\ o\ ponto\ a\ partir\ do\ qual\ a\ busca\ acontecer\u00E1\ na\ \u00E1rvore\r\n\ @params\ name\ nome\ da\ pessoa\ que\ est\u00E1\ sendo\ pesquisada\r\n\ @return\ node\ n\u00F3\ com\ o\ valor\ que\ est\u00E1\ sendo\ buscado\r\n
comment7.params=CPF
comment7.target=boolean\ hasNode(java.lang.String)
comment7.text=\r\n\ hasNode\ -\ m\u00E9todo\ chamado\ quando\ queremos\ verificar\ se\ h\u00E1\ registro\ com\ o\ CPF\ passado\ por\ par\u00E2metro\r\n\ \r\n\ @params\ CPF\ valor\ do\ CPF\ que\ ser\u00E1\ usado\ para\ verificar\ a\ exist\u00EAncia\ de\ um\ registro\ semelhante\r\n\ @return\ True\ caso\ tenha\ encontrado,\ ou\ False\ caso\ contr\u00E1rio\r\n
comment8.params=node\ CPF
comment8.target=boolean\ seachCPF(Node,\ java.lang.String)
comment9.params=node
comment9.target=int\ calcHeight(Node)
comment9.text=\r\n\ calcHeight\ -\ m\u00E9todo\ que\ calcula\ a\ altura\ de\ um\ determinado\ n\u00F3\ da\ \u00E1rvore\r\n\ \r\n\ @params\ node\ n\u00F3\ que\ ter\u00E1\ a\ altura\ calculada\r\n\ @return\ a\ \ \ \ caso\ o\ valor\ da\ altura\ da\ subarvore\ a\ esquerda\ seja\ maior\ que\ a\ da\ direita\r\n\ @return\ b\ \ \ \ caso\ o\ valor\ da\ altura\ da\ subarvore\ a\ direita\ seja\ maior\ que\ a\ da\ esquerda\r\n
numComments=21
